Compiling and Linking luaSDL.dll for Lua 5.1 with MinGW
=======================================================

By Tung Nguyen

luaSDL is pretty old, but it can be compiled for Windows. You'll need:

* MinGW and MSYS
  http://www.mingw.org/
* SDL development libraries (the "mingw" tarball)
  http://www.libsdl.org/download-1.2.php
* Lua 5.1.4 (Win32_dll8_lib)
  http://luabinaries.luaforge.net/download.html
* tolua++ (not "tolua"!)
  http://www.codenix.com/~tolua/
* luaSDL source
  http://lua-users.org/wiki/LuaModuleLuaSdl

Following these instructions, you can make luaSDL.dll, which can then be loaded by Lua 5.1 using its package mechanism.


1. Install MinGW and MSYS
-------------------------

Do this as instructed on its website.

If you're building tolua++ from source, add the drive it'll be on to MSYS' /etc/fstab so you can access it from MSYS' shell later.


2. Extract SDL Development Libraries
------------------------------------

Extract them where you want, but keep in mind you'll be typing/copy-pasting it, so you may want to keep it short.


3. Extract Lua 5.1.4 Windows Development Libraries
--------------------------------------------------

Same deal as above.


4. Obtain tolua++ for Windows
-----------------------------

tolua++ is a utility that can take slightly-changed C or C++ headers and generate C bindings that can then be compiled into libraries that Lua can load. luaSDL relies on it.

If you found a recent version of tolua++ for Lua 5.1 and Windows, use it. You'll need tolua++.exe, the header (tolua++.h), the DLL (tolua++.dll) and the linking library (libtolua++.a).

If you're building it from source, open the MSYS shell and enter this:

/path/to/tolua++/src/lib $ gcc -shared -o tolua++.dll \
        -Wl,--out-implib,libtolua++.a \
        *.c \
        <path to Lua>/lua51.dll \
        -I../../include -I<path to Lua>/include

This creates tolua++.dll (runtime library) and libtolua++.a (linking library).

Then to build the tolua++ utility program:

/path/to/tolua++/src/bin $ gcc -o tolua++.exe \
        tolua.c toluabind.c \
        -I../../include -I<path to Lua>/include \
        <path to Lua>/lua51.dll \
        -L../lib -ltolua++

This creates tolua++.exe, which we can now use to help make luaSDL.


5. Make SDL.c from SDL.pkg using tolua++
----------------------------------------

Enter this in the MSYS shell:

/path/to/luaSDL $ <path to tolua++>/src/bin/tolua++.exe -o SDL.c SDL.pkg

This makes SDL.c, but it's not quite ready to be compiled yet.


6. Export luaopen_SDL in SDL.c
------------------------------

The problem with the current SDL.c is that it won't export the luaopen_SDL function, which is needed to load the final library in Lua 5.1. Make the following change to the bottom of SDL.c:

#if defined(LUA_VERSION_NUM) && LUA_VERSION_NUM <= 501
#ifdef _WIN32
 TOLUA_API __declspec(dllexport) int luaopen_SDL (lua_State* tolua_S)
#else
 TOLUA_API (int luaopen_SDL (lua_State* tolua_S)
#endif
{
 return tolua_SDL_open(tolua_S);
};
#endif

Adding __declspec(dllexport) makes the luaopen_SDL visible outside of the final DLL.


7. Compile luaSDL.dll
---------------------

Make sure you get these command line args in the right order. In particular, SDL.o should appear BEFORE the SDL options.

/path/to/luaSDL $ gcc -shared -o luaSDL.dll \
        -L<path to Lua libs> -llua51 -llua5.1 \
        SDL.o \
        -L<path to SDL>/lib -lSDL \
        -L<path to tolua++>/src/lib -ltolua++

This will create luaSDL.dll.

I'm not sure if both lua51 and lua5.1 are needed here, or even how they differ. If anybody knows, drop me a line at http://tunginobi.spheredev.org/site/node/92.


8. Using luaSDL
---------------

Put tolua++.dll created earlier in the current directory. Now luaSDL.dll can be loaded like any other binary library in Lua 5.1 using package.loadlib.

assert(package.loadlib("./luaSDL.dll", "luaopen_SDL"))()


Quipkit Notes
-------------

Quipkit includes all non-generated source files. This does NOT include tolua.c, which is needed to build tolua++.exe. The tolua++ build process is fully automated using the Quipkit makefile, which generates tolua.c, but the Code::Blocks IDE for Windows has no obvious way of reproducing this system. The result: tolua.c is maintained differently on Linux and Windows, with no clear way to reconcile them.

If you're using the tolua++ source here, download the source from the tolua++ website, copy tolua.c to /path/to/tolua++/src/bin, and compile tolua++.exe as usual.
