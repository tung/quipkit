h1. game.lua Framework

game.lua is a simple framework that prepares an SDL and OpenGL environment, and drives a timed game loop, given some hook functions.


h2. Example

The following code bounces a smiley image around the screen. To use game.lua, require "game". Set hooks like game.init() to control how your game works. Finally, fire up the game itself by calling game.run().

<pre><code>
require "game"
require "sdl"
require "sprite"

local smile
local x, y, dx, dy = 0, 0, 1, 1

function game.init()
    smile = sprite.sprite:new("test/smile.png")
end

function game.event(e)
    if e.type == SDL.SDL_QUIT then
        return game.GAME_QUIT
    end
end

function game.update(delta)
    local screen_w, screen_h = game.getScreenSize()
    x = x + dx
    y = y + dy
    if x < 0 then
        x = 0
        dx = -dx
    elseif x + smile.w >= screen_w then
        x = screen_w - 1 - smile.w
        dx = -dx
    end
    if y < 0 then
        y = 0
        dy = -dy
    elseif y + smile.h >= screen_h then
        y = screen_h - 1 - smile.h
        dy = -dy
    end

    return game.GAME_REDRAW
end

function game.draw()
    game.clearScreen()
    smile:draw(x, y)
end

-- Set screen properties.
game.setScreenSize(640, 480)
game.setScreenTitle("Quipkit Engine Demo")

-- Launch our game.
game.run()
</code></pre>


h2. Reference

h3. Hooks

Hooks are functions you set that are later called by game.lua once it's running, e.g. if you set a function for game.init(), it will be called to initialise your game before the game loop begins.

Some hooks are called with relevant arguments too, e.g. game.update() is called with a 'delta' argument, which is the number of milliseconds since game.update() was last called.

|_. Hook Name   |_. Arguments |_. Description |
| @game.init@   | none        | Called after SDL and OpenGL are set up, but before the game loop. |
| @game.event@  | sdl_event   | Called whenever an input event occurs. |
| @game.update@ | delta       | Called at regular intervals in the game loop. |
| @game.draw@   | none        | Called to (re)draw the screen. |
| @game.exit@   | none        | Called after the game loop ends. |

game.event() and game.update() can control the game loop by returning special values, described below.

|_. Hook Return Value |_. Description |
| @game.REDRAW@       | Request that game.draw() be called to redraw the screen. |
| @game.QUIT@         | End the game loop. |
