h1. game.lua Framework

game.lua is a simple framework that prepares an SDL and OpenGL environment, and drives a timed game loop, given some hook functions.


h2. Example

The following code bounces a smiley image around the screen. To use game.lua, require "game". Set hooks like game.init() to control how your game works. Finally, fire up the game itself by calling game.run().

<pre><code>
require "game"
require "sdl"
require "sprite"

local smile
local x, y, dx, dy = 0, 0, 1, 1

function game.init()
    smile = sprite.sprite:new("test/smile.png")
end

function game.event(e)
    if e.type == SDL.SDL_QUIT then
        return game.GAME_QUIT
    end
end

function game.update(delta)
    local screen_w, screen_h = game.getScreenSize()
    x = x + dx
    y = y + dy
    if x < 0 then
        x = 0
        dx = -dx
    elseif x + smile.w >= screen_w then
        x = screen_w - 1 - smile.w
        dx = -dx
    end
    if y < 0 then
        y = 0
        dy = -dy
    elseif y + smile.h >= screen_h then
        y = screen_h - 1 - smile.h
        dy = -dy
    end

    return game.GAME_REDRAW
end

function game.draw()
    game.clearScreen()
    smile:draw(x, y)
end

-- Set screen properties.
game.setScreenSize(640, 480)
game.setScreenTitle("Quipkit Engine Demo")

-- Launch our game.
game.run()
</code></pre>


h2. Reference

h3. Hooks

Hooks are functions you set that are later called by game.lua once it's running, e.g. if you set a function for game.init(), it will be called to initialise your game before the game loop begins.

Some hooks are called with relevant arguments too, e.g. game.update() is called with a 'delta' argument, which is the number of milliseconds since game.update() was last called.

|_. Hook Name   |_. Arguments |_. Description |
| @game.init@   | none        | Called after SDL and OpenGL are set up, but before the game loop. |
| @game.event@  | sdl_event   | Called whenever an input event occurs. |
| @game.update@ | delta       | Called at regular intervals in the game loop. |
| @game.draw@   | none        | Called to (re)draw the screen. |
| @game.exit@   | none        | Called after the game loop ends. |

game.event() and game.update() can control the game loop by returning special values, described below.

|_. Hook Return Value |_. Description |
| @game.REDRAW@       | Request that game.draw() be called to redraw the screen. |
| @game.QUIT@         | End the game loop. |

h3. Functions

h4. game.clearScreen() - nil

Clear the game window to black. Call this at the start of your game.draw() hook to prevent weird trails.

h4. game.getScreenSize() - width, height

Get the configured width and height of the game window. See also game.setScreenSize().

h4. game.getScreenTitle() - title

Get the configured title of the game window. See also game.setScreenTitle().

h4. game.loadConfig() - true or nil

Load a saved configuration from disk. This configuration lives at "config.tbl", so this function returns true if it there and loadable, or nil otherwise. See also game.saveConfig().

h4. game.run() - nil

Set up the game environment, launch the game loop and clean up afterwards. Call this after you've set up your hooks and configuration.

h4. game.saveConfig() - nil

Save the current game's configuration to disk. This configuration is saved to "config.tbl". See also game.loadConfig().

h4. game.setScreenSize(new_width, new_height) - old_width, old_height

Configure the width and height of the game window to be set when game.run() is called. Note that this won't change the screen size while the game is running, only before. See also game.getScreenSize().

h4. game.setScreenTitle(new_title) - old_title

Set the title of the game window when game.run() is called. See also game.getScreenTitle().
